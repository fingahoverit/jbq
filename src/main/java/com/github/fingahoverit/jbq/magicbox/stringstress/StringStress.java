package com.github.fingahoverit.jbq.magicbox.stringstress;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class StringStress {

	private static final Integer THREAD_NUMBER = 5;
	private static final Integer DELAY_RANGE_MILLI = 5000;
	private static final Integer CONCATENATION_DEPTH = 2;

	// 2
	private static final String CONCATENATION_RESULT = "01";
	// 5
	// private static final String CONCATENATION_RESULT = "01234";
	// 10
	// private static final String CONCATENATION_RESULT = "0123456789";
	// 100
	// private static final String CONCATENATION_RESULT =
	// "0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
	// 1000
	// private static final String CONCATENATION_RESULT =
	// "0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939940941942943944945946947948949950951952953954955956957958959960961962963964965966967968969970971972973974975976977978979980981982983984985986987988989990991992993994995996997998999";

	private static StressStats statistic = new StressStats();

	private static long startTimer() {
		long startTime = System.nanoTime();
		return startTime;
	}

	private static long stepTimer(long startTime) {
		long duration = (System.nanoTime() - startTime) / 1000;
		return duration;
	}

	private static void log(String phrase) {
		System.out.println(phrase);
	}

	private static String concatOperator() {

		long startTime = startTimer();

		String s = "";
		for (int i = 0; i < CONCATENATION_DEPTH; i++) {
			s = s + Integer.toString(i);
		}
		statistic.addDuration(StressStats.KEY_OPERATOR, stepTimer(startTime));

		return s;
	}

	private static String concatConcat() {

		long startTime = startTimer();

		String s = "";
		for (int i = 0; i < CONCATENATION_DEPTH; i++) {
			s = s.concat(Integer.toString(i));
		}
		statistic.addDuration(StressStats.KEY_CONCAT, stepTimer(startTime));

		return s;
	}

	private static String concatStrBuffer() {

		long startTime = startTimer();

		StringBuffer buffer = new StringBuffer();
		for (int i = 0; i < CONCATENATION_DEPTH; i++) {
			buffer.append(i);
		}
		statistic.addDuration(StressStats.KEY_STRINGBUFFER, stepTimer(startTime));

		return buffer.toString();
	}

	private static String concatStrBuilder() {

		long startTime = startTimer();

		StringBuilder builder = new StringBuilder();
		for (int i = 0; i < CONCATENATION_DEPTH; i++) {
			builder.append(i);
		}
		statistic.addDuration(StressStats.KEY_STRINGBUILDER, stepTimer(startTime));

		return builder.toString();
	}

	public static void main(String args[]) throws InterruptedException {

		ExecutorService es = Executors.newCachedThreadPool();
		for (int i = 0; i < THREAD_NUMBER; i++) {
			es.execute(new Thread() {
				@Override
				public void run() {

					// Pause for Thread concurrency
					try {
						synchronized (this) {
							long waitTime = Math.round((Math.random() * DELAY_RANGE_MILLI));
							this.wait(waitTime);
						}

					} catch (InterruptedException ex) {
						ex.printStackTrace();
						log("Erreur dans la pause du thread");
					}

					if (!CONCATENATION_RESULT.equals(concatOperator())) {
						statistic.addError(StressStats.KEY_OPERATOR);
					}

					if (!CONCATENATION_RESULT.equals(concatConcat())) {

						statistic.addError(StressStats.KEY_CONCAT);
					}

					if (!CONCATENATION_RESULT.equals(concatStrBuffer())) {

						statistic.addError(StressStats.KEY_STRINGBUFFER);
					}

					if (!CONCATENATION_RESULT.equals(concatStrBuilder())) {

						statistic.addError(StressStats.KEY_STRINGBUILDER);
					}
				}
			});
		}

		es.shutdown();
		es.awaitTermination(1, TimeUnit.MINUTES);
		// all tasks have finished or the time has been reached.

		statistic.printStats();
	}

}
